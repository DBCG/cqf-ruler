{
  "resourceType": "Library",
  "id": "OMTKLogic",
  "version": "0.1.0",
  "type": {
    "coding": [
      {
        "code": "logic-library"
      }
    ]
  },
  "status": "draft",
  "content": [
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}